name: Notify Discord of New Release

on:
  schedule:
    - cron: '0 * * * *' # Check every hour
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  notify:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up JQ
      run: sudo apt-get install jq

    - name: Initialize previous release
      run: |
        if [ ! -f previous_release ]; then
          echo "previous_release=" > previous_release
        fi

    - name: Load previous release
      id: load_prev_release
      run: |
        if [ -f previous_release ]; then
          source previous_release
        fi
        echo "PREVIOUS_RELEASE=${previous_release}" >> $GITHUB_ENV

    - name: Check for New Release
      id: check_release
      run: |
        latest_release=$(curl -s https://api.github.com/repos/wowsims/cata/releases/latest)
        latest_release_name=$(echo $latest_release | jq -r '.tag_name')
        latest_release_url=$(echo $latest_release | jq -r '.html_url')
        latest_release_body=$(echo $latest_release | jq -r '.body' | jq -R -s '.' | jq -r)

        echo "LATEST_RELEASE_NAME=${latest_release_name}" >> $GITHUB_ENV
        echo "LATEST_RELEASE_URL=${latest_release_url}" >> $GITHUB_ENV
        echo "LATEST_RELEASE_BODY=${latest_release_body}" >> $GITHUB_ENV

    - name: Debug Outputs
      run: |
        echo "Previous release: ${{ env.PREVIOUS_RELEASE }}"
        echo "Current release: ${{ env.LATEST_RELEASE_NAME }}"

    - name: Send Discord Notification
      if: env.LATEST_RELEASE_NAME != env.PREVIOUS_RELEASE
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      run: |
        curl -H "Content-Type: application/json" -X POST -d \
        '{"content": "New release published for wowsims/cata: **'"${{ env.LATEST_RELEASE_NAME }}"'**\n\nDetails: '"${{ env.LATEST_RELEASE_BODY }}"'\n\n[View Release](<'"${{ env.LATEST_RELEASE_URL }}"'>)"}' \
        $DISCORD_WEBHOOK_URL

    - name: Update Release Version
      if: env.LATEST_RELEASE_NAME != env.PREVIOUS_RELEASE
      run: |
        echo "previous_release=${{ env.LATEST_RELEASE_NAME }}" > previous_release
        git config --global user.email "you@example.com"
        git config --global user.name "GitHub Actions"
        git add previous_release
        git commit -m "Update previous release version"
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
